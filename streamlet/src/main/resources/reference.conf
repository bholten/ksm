streamlet {

  startup.handler = "com.github.bholten.ksm.streams.DefaultStartupHandler"
  startup.handler = ${?STREAMLET_STARTUP_HANDLER}

  http {
    server {
      host = "localhost"
      host = ${?STREAMLET_HTTP_SERVER_HOST}
      port = 8080
      port = ${?STREAMLET_HTTP_SERVER_PORT}
    }
  }

  kafka {
    consumer {
      auto.offset.reset = "earliest"
      auto.offset.reset = ${?STREAMLET_KAFKA_CONSUMER_AUTO_OFFSET_RESET}
      heartbeat.interval.ms = 3000
      heartbeat.interval.ms = ${?STREAMLET_KAFKA_CONSUMER_HEARTBEAT_INTERVAL_MS}
      session.timeout.ms = 10000
      session.timeout.ms = ${?STREAMLET_KAFKA_CONSUMER_SESSION_TIMEOUT_MS}
    }

    producer {
      acks = "all"
      acks = ${?STREAMLET_KAFKA_PRODUCER_ACKS}
    }

    security {
      ssl {
        truststore {
          location = null
          location = ${?STREAMLET_KAFKA_SECURITY_SSL_TRUSTSTORE_LOCATION}
          password = null
          password = ${?STREAMLET_KAFKA_SECURITY_SSL_TRUSTSTORE_PASSWORD}
        }

        keystore {
          location = null
          location = ${?STREAMLET_KAFKA_SECURITY_SSL_KEYSTORE_LOCATION}
          password = null
          password = ${?STREAMLET_KAFKA_SECURITY_SSL_KEYSTORE_PASSWORD}
        }

        key.password = null
        key.password = ${?STREAMLET_KAFKA_SECURITY_SSL_KEY_PASSWORD}
      }

      sasl {
        jaas.config = null
        jaas.config = ${?STREAMLET_KAFKA_SECURITY_SASL_JAAS_CONFIG}
        mechanism = "GSSAPI"
        mechanism = ${?STREAMLET_KAFKA_SECURITY_SASL_MECHANISM}
      }
    }


    startup.timeout.duration = 10 seconds
    startup.timeout.duration = ${?STREAMLET_STARTUP_TIMEOUT_DURATION}

    streams {
      application.id = "changeme"
      application.id = ${?STREAMLET_KAFKA_STREAMS_APPLICATION_ID}
      bootstrap.servers = "localhost:9092"
      bootstrap.servers = ${?STREAMLET_KAFKA_STREAMS_BOOTSTRAP_SERVERS}
      replication.factor = 3
      replication.factor = ${?STREAMLET_KAFKA_STREAMS_REPLICATION_FACTOR}
      state.dir = "/tmp/kafka-streams"
      state.dir = ${?STREAMLET_KAFKA_STREAMS_STATE_DIR}
      acceptable.recovery.lag = 10000
      acceptable.recovery.lag = ${?STREAMLET_KAFKA_STREAMS_ACCEPTABLE_RECOVERY_LAG}
      cache.max.bytes.buffering = 10485760
      csche.max.bytes.buffering = ${?STREAMLET_KAFKA_STREAMS_CACHE_MAX_BYTES_BUFFERING}
      client.id = ""
      client.id = ${?STREAMLET_KAFKA_STREAMS_CLIENT_ID}
      default.deserialization.exception.handler = "org.apache.kafka.streams.errors.LogAndFailExceptionHandler"
      default.deserialization.exception.handler = ${?STREAMLET_KAFKA_STREAMS_DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER}
      default.key.serde = "org.apache.kafka.common.serialization.Serdes$ByteArraySerde"
      default.key.serde = ${?STREAMLET_KAFKA_STREAMS_DEFAULT_KEY_SERDE}
      default.production.exception.handler = "org.apache.kafka.streams.errors.DefaultProductionExceptionHandler"
      default.production.exception.handler = ${?STREAMLET_KAFKA_STREAMS_DEFAULT_PRODUCTION_EXCEPTION_HANDLER}
      default.timestamp.extractor = "org.apache.kafka.streams.processor.FailOnInvalidTimestamp"
      default.timestamp.extractor = ${?STREAMLET_KAFKA_STREAMS_DEFAULT_TIMESTAMP_EXTRACTOR}
      default.value.serde = "org.apache.kafka.common.serialization.Serdes$ByteArraySerde"
      default.value.serde = ${?STREAMLET_KAFKA_STREAMS_DEFAULT_VALUE_SERDE}
      default.windowed.key.serde.inner = null
      default.windowed.key.serde.inner = ${?STREAMLET_KAFKA_STREAMS_DEFAULT_WINDOWED_KEY_SERDE_INNER}
      default.windowed.value.serde.inner = null
      default.windowed.value.serde.inner = ${?STREAMLET_KAFKA_STREAMS_DEFAULT_WINDOWED_VALUE_SERDE_INNER}
      max.task.idle.ms = 0
      max.task.idle.ms = ${?STREAMLET_KAFKA_STREAMS_MAX_IDLE_TASKS}
      max.warmup.replicas = 2
      max.warmup.replicas = ${?STREAMLET_KAFKA_STREAMS_MAX_WARMUP_REPLICAS}
      num.standby.replicas = 0
      num.standby.replicas = ${?STREAMLET_KAFKA_STREAMS_NUM_STANDBY_REPLICAS}
      num.stream.threads = 1
      num.stream.threads = ${?STREAMLET_KAFKA_STREAMS_NUM_STREAM_THREADS}
      processing.guarantee = "at_least_once"
      processing.guarantee = ${?STREAMLET_KAFKA_STREAMS_PROCESSING_GUARANTEE}
      security.protocol = "PLAINTEXT"
      security.protocol = ${?STREAMLET_KAFKA_STREAMS_SECURITY_PROTOCOL}
      task.timeout.ms = 300000
      task.timeout.ms = ${?STREAMLET_KAFKA_STREAMS_TASK_TIMEOUT_MS}
      topology.optimization = "all"
      topology.optimization = ${?STREAMLET_KAFKA_STREAMS_TOPOLOGY_OPTIMIZATION}
      application.server = ""
      application.server = ${?STREAMLET_KAFKA_STREAMS_APPLICATION_SERVER}
      buffered.records.per.partition = 1000
      buffered.records.per.partition = ${?STREAMLET_KAFKA_STREAMS_BUFFERED_RECORDS_PER_PARTITION}
      built.in.metrics.version = "latest"
      built.in.metrics.version = ${?STREAMLET_KAFKA_STREAMS_BUILT_IN_METRICS_VERSION}
      commit.interval.ms = 2000
      commit.interval.ms = ${?STREAMLET_KAFKA_STREAMS_COMMIT_INTERVAL_MS}
      connections.max.idle.ms = 540000
      connections.max.idle.ms = ${?STREAMLET_KAFKA_STREAMS_CONNECTIONS_MAX_IDLE_MS}
      metadata.max.age.ms = 300000
      metadata.max.age.ms = ${?STREAMLET_KAFKA_STREAMS_METADATA_MAX_AGE_MS}
      metric.reporters = ""
      metric.reporters = ${?STREAMLET_KAFKA_STREAMS_METRICS_REPORTERS}
      metrics.num.samples = 2
      metrics.num.samples = ${?STREAMLET_KAFKA_STREAMS_METRICS_NUM_SAMPLES}
      metrics.recording.level = "INFO"
      metrics.recording.level = ${?STREAMLET_KAFKA_STREAMS_METRICS_REPORTING_LEVEL}
      metrics.sample.window.ms = 30000
      metrics.sample.window.ms = ${?STREAMLET_KAFKA_STREAMS_METRICS_SAMPLE_WINDOW_MS}
      poll.ms = 100
      poll.ms = ${?STREAMLET_KAFKA_STREAMS_POLL_MS}
      probing.rebalance.interval.ms = 600000
      probing.rebalance.interval.ms = ${?STREAMLET_KAFKA_STREAMS_PROBING_REBALANCE_INTERVAL_MS}
      receive.buffer.bytes = 32768
      receive.buffer.bytes = ${?STREAMLET_KAFKA_STREAMS_RECEIVE_BUFFER_BYTES}
      reconnect.backoff.max.ms = 1000
      reconnect.backoff.max.ms = ${?STREAMLET_KAFKA_STREAMS_RECONNECT_BACKOFF_MAX_MS}
      reconnect.backoff.ms = 50
      reconnect.backoff.ms = ${?STREAMLET_KAFKA_STREAMS_RECONNECT_BACKOFF_MS}
      request.timeout.ms = 40000
      request.timeout.ms = ${?STREAMLET_KAFKA_STREAMS_REQUEST_TIMEOUT_MS}
      retry.backoff.ms = 100
      retry.backoff.ms = ${?STREAMLET_KAFKA_STREAMS_RETRY_BACKOFF_MS}
      rocksdb.config.setter = null
      rocksdb.config.setter = ${?STREAMLET_KAFKA_STREAMS_ROCKSDB_CONFIG_SETTER}
      send.buffer.bytes = 131072
      send.buffer.bytes = ${?STREAMLET_KAFKA_STREAMS_SEND_BUFFER_BYTES}
      state.cleanup.delay.ms = 600000
      state.cleanup.delay.ms = ${?STREAMLET_KAFKA_STREAMS_STATE_CLEANUP_DELAY_MS}
      upgrade.from = null
      upgrade.from = ${?STREAMLET_KAFKA_STREAMS_UPGRADE_FROM}
      windowstore.changelog.additional.retention.ms = 86400000
      windowstore.changelog.additional.retention.ms = ${?STREAMLET_KAFKA_STREAMS_WINDOWSTORE_CHANGELOG_ADDITIONAL_RETENTION_MS}
    }
  }

  metrics {
    hostname = "localhost"
    hostname = ${?STREAMLET_METRICS_HOSTNAME}
    port = 8125
    port = ${?STREAMLET_METRICS_PORT}
    prefix = "application"
    prefix = ${?STREAMLET_METRICS_PREFIX}
  }
}